create database project2;

-- Find the average number of products per order,
-- grouped by customer city.

with count_per_order as (select order_items.order_id , orders.customer_id , count(order_items.order_id) as oc from order_items join orders on
order_items.order_id = orders.order_id group by order_items.order_id , orders.customer_id)

select customers.customer_city , avg(count_per_order.oc) from customers join count_per_order on
customers.customer_id = count_per_order.customer_id group by customers.customer_city

;

-- Calculate the percentage of total revenue contributed by each product category.
select products.product_category , round(sum(payments.payment_value) / (
select round(sum(payment_value),2) from payments
)*100,2) as sum from products join order_items on
products.product_id = order_items.product_id join payments on payments.order_id = order_items.order_id
group by products.product_category order by sum desc
;

-- Identify the correlation between product price and the number of
-- times a product has been purchased.

select products.product_category , count(order_items.order_id) as count , round(avg(order_items.price),2) as price
from products join order_items on products.product_id = order_items.product_id
group by products.product_category;

-- Calculate the total revenue generated by each seller, and rank them by revenue.

select sellers.seller_id , round(sum(payments.payment_value),2) ,
dense_rank() over( order by round(sum(payments.payment_value),2) desc ) as ranlk from sellers
join order_items on
sellers.seller_id = order_items.seller_id join payments on payments.order_id = order_items.order_id
group by sellers.seller_id; 


-- Calculate the moving average of order values for each customer over their order history.
select customer_id , order_purchase_timestamp , payment , avg(payment) over( partition by customer_id order by
order_purchase_timestamp rows between 2 preceding and current row ) as mov_avg from
(select orders.customer_id , orders.order_purchase_timestamp , payments.payment_value as payment from
orders join payments on orders.order_id = payments.order_id) as a ;

-- Calculate the cumulative sales per month for each year.

select Years, Months,sum(payment) over( order by Years , Months ) as x from 
(select year(orders.order_purchase_timestamp) as Years, month(orders.order_purchase_timestamp) as Months
, sum(payments.payment_value) as payment from
orders join payments on orders.order_id = payments.order_id
group by YEAR(orders.order_purchase_timestamp), 
        MONTH(orders.order_purchase_timestamp)
order by Years , Months) as s;

-- Calculate the year-over-year growth rate of total sales.

with a as( select year(orders.order_purchase_timestamp) as Years
, sum(payments.payment_value) as payment from
orders join payments on orders.order_id = payments.order_id
group by YEAR(orders.order_purchase_timestamp)
order by Years)

select years, (( payment - lag(payment, 1) over( order by years ) ) /
lag(payment, 1) over( order by years ))*100  from a
;

-- Calculate the retention rate of customers,
-- defined as the percentage of customers who make
-- another purchase within
-- 6 months of their first purchase.
with a as (select customers.customer_id, min(orders.order_purchase_timestamp) first_order
from customers join orders on
customers.customer_id = orders.customer_id group by
customers.customer_id ),

b as ( select a.customer_id , count( distinct orders.order_purchase_timestamp ) 
from a join orders on orders.customer_id = a.customer_id 
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order , interval 6 month )
group by a.customer_id )

select 100 * ( count( distinct a.customer_id ) / count( distinct b.customer_id ) )
from a left join b on a.customer_id = b.customer_id
;

-- Identify the top 3 customers who
-- spent the most money in each year.

with ad as (select year(orders.order_purchase_timestamp) as yrs,
orders.customer_id as id,
sum(payments.payment_value) as pay,
dense_rank() over( partition by
year(orders.order_purchase_timestamp) order by
sum(payments.payment_value) desc ) d_rank  
from orders join payments on
orders.order_id = payments.order_id group by yrs,
orders.customer_id)

select ad.yrs , ad.id , ad.pay ,ad.d_rank from ad where d_rank <= 3

;

with ad as (select year(orders.order_purchase_timestamp) as yrs,
orders.customer_id as id,
sum(payments.payment_value) as pay,
dense_rank() over( partition by
year(orders.order_purchase_timestamp) order by
sum(payments.payment_value) desc ) d_rank  
from orders join payments on
orders.order_id = payments.order_id group by yrs,
orders.customer_id)

select ad.yrs , ad.id , ad.pay , ad.d_rank from ad where d_rank <= 3
